<!DOCTYPE HTML>
<html lang="en"><!-- InstanceBegin template="/Templates/pageGuide.dwt" codeOutsideHTMLIsLocked="false" --> 
<head>

<meta charset="utf-8">
<!-- InstanceBeginEditable name="doctitle" -->
<title>Characters and Strings</title>
<!-- InstanceEndEditable -->
<!-- InstanceBeginEditable name="head" -->
<!-- InstanceEndEditable -->

<link href="../stylesheet.css"    rel="stylesheet" />
<link href="../Graphics/Icon.ico" rel="shortcut icon" />

<!--[if lte IE 7]>
<style>
.content { margin-right: -1px; } /* this 1px negative margin can be placed on any of the columns in
                                                                        this layout with the same corrective effect. */
ul.nav a { zoom: 1; }                    /* the zoom property gives IE the hasLayout trigger it needs to correct
                                                                        extra whiltespace between the links */
</style>
<![endif]-->

<!--[if lt IE 9]>
<script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
<![endif]-->

<script type="text/javascript">
function MM_jumpMenu(targ,selObj,restore){ //v3.0
  eval(targ+".location='"+selObj.options[selObj.selectedIndex].value+"'");
  if (restore) selObj.selectedIndex=0;
}
</script>
</head>

<body>

<div class="container">

  <header>
    <hgroup>
      <a href="../index.htm" id="LogoLink"><img src="../Graphics/swdeLogo200.jpg" alt="Logo" /></a>
      <div class="TitleBlock">
        <a href="../index.htm">
            <h1>Software Design &amp; Engineering</h1>
            <h1>
                    <!-- InstanceBeginEditable name="PageTitle" -->Characters and Strings<!-- InstanceEndEditable -->
          </h1>
        </a>
      </div>
      <div class="TitleBlock" id="DropDown">
        <ul>
          <li><a href="../index.htm">Home</a></li>
          <li><a href="../Modules/index.htm">Modules</a>
            <ul id="ModulesDrop">
              <li><a href="../Modules/PersonalProjs/KeePass.htm">KeePass/LastPass</a></li>
              <li><a href="../Modules/CodingProjs/MyLibrary.htm">Library</a></li>
              <li><a href="../Modules/PersonalProjs/MvMp3.htm">Move Mp3 Tracks</a></li>
              <li><a href="../Modules/SJRACESProjs/PreOutpost.htm">PreOutpost</a></li>
              <li><a href="../Modules/PersonalProjs/PrntProgramAndWix.htm">Print Program (pp)</a></li>
              <li><a href="../Modules/SJRACESProjs/RWracesDB.htm">Read/Write RACES DB</a></li>
              <li><a href="../Modules/PersonalProjs/PrntProgramAndWix.htm#SetEnv">Set Environment Var</a></li>
              <li><a href="../Modules/CodingProjs/StringModules.htm">String Class</a></li>
              <li><a href="../Modules/CodingProjs/WixApp.htm">WixApp</a></li>
            </ul>
          </li>
          <li><a href="../Pictures.htm">Pictures</a></li>
          <li><a href="index.htm">Prog Guide</a>
            <ul id="ModulesDrop">
              <li><a href="Geography.htm">Screen and Page Geography and Code Layout</a></li>
              <li><a href="Naming.htm">Names and Naming Conventions</a></li>
              <li><a href="Abstraction.htm">Abstraction</a></li>
              <li><a href="SuccessFailure.htm">Null, Success and Failure</a></li>
              <li><a href="OneEntry.htm">One Entry, One Exit (Structured Programming)</a></li>
              <li><a href="HidingDetails.htm">Hiding Details</a></li>
              <li><a href="Expandable.htm">Expandable</a></li>
              <li><a href="qsort.htm">qsort</a></li>
              <li><a href="Strings.htm">Strings</a></li>
<!--
             <li>Packages and/or Objects</li>
             <li>Loops in Objects</li>
             <li>Building Blocks</li>
             <li>Vectors (Arrays)</li>
-->          
            </ul>
          </li>
        </ul>
      </div>
        </hgroup>
  </header>

  <div class="sidebar1">
    <nav>
      <ul>
        <li><a href="../index.htm">Home</a></li>
        <li><a href="../Modules/index.htm">Modules &amp; Projects</a></li>
        <ul id="Modules">
        <li><a href="../Modules/CodingProjs/index.htm">Coding Projects</a></li>
        <li><a href="../Modules/DataBaseProjs/index.htm">Data Base Projects</a></li>
        <li><a href="../Modules/PersonalProjs/index.htm">Personal Projects</a></li>
        <li><a href="../Modules/SJRACESProjs/index.htm">SJ RACES Projects</a></li>
        </ul>
        <li><a href="../Pictures.htm">Pictures</a></li>
        <li><a href="index.htm">Programming Guide</a></li>
          <ul id="Modules">
            <li><a href="Geography.htm">Screen and Page Geography and Code Layout</a></li>
            <li><a href="Naming.htm">Names and Naming Conventions</a></li>
            <li><a href="Abstraction.htm">Abstraction</a></li>
            <li><a href="SuccessFailure.htm">Null, Success and Failure</a></li>
            <li><a href="OneEntry.htm">One Entry, One Exit (Structured Programming)</a></li>
            <li><a href="HidingDetails.htm">Hiding Details</a></li>
            <li><a href="Expandable.htm">Expandable</a></li>
            <li><a href="qsort.htm">qsort</a></li>
            <li><a href="Strings.htm">Strings</a></li>
<!--        <li>Packages and/or Objects</li>
            <li>Vectors (Arrays)</li>
            <li>Loops in Objects</li>
            <li>Building Blocks</li>
-->
          </ul>
        <li><a href="../about.htm">About Bob</a></li>
      </ul>
    </nav>
  </div><!-- end .sidebar1 -->

  <article class="content"><!-- InstanceBeginEditable name="Content" -->
  <section>
    <h2>Characters</h2>
    <p>
        For a few years I thought I understood what a character was in the bit world.  My first
      brush with characters was a 6 bit character, then I was asked to use to program on a
      SDS 940, atime sharing machine, with a
    24 bit word size and a 7 bit character size. Then someone figured out that powers of 2 were better word sizes and the character became 8 bits. Later, other spoken languages needed more bits to represent the characters in the alphabet and the Multibyte characters were invented. One of those representations is Unicode, which is 16 bits per character.</p>
    <p>Character size is of little importance except in files and scratchpads and other
    miscellanous places where an eight bit character is expected. Fortunately it is fairly
    easily to translate from one form to another.  One just has to discover when the translation
    is required.
    </p>

  <h2>Strings</h2>
  <p>
    SNOBOL ("StriNg Oriented and symBOlic Language") is a series of computer programming
    languages developed between 1962 and 1967 at AT&T Bell Laboratories by David J. Farber,
    Ralph E. Griswold and Ivan P. Polonsky, culminating in SNOBOL4.  Thats were I first encountered
    strings.  The language taught one that a string is an entity that can be manipulated in a
    variety of wonderful ways.
  </p>
  <p>
    So, since one could not write in SNOBOL for a variety of reasons (lacked a view of the
    outside world being one), one needed to add string features to each programming language.
    My first real effort was in QSPL, a language on the SDS 940.  A bunch of functions operated
    on a four pointer data structure which pointed to the beginning and end of the block of
    storage used store the characters (both dynamic and static beginning and end).
  </p>
  <p>
        Then there were a few years programming in Assemply Language, which with Macros I transformed
    into A Macro Language (AML).  I am happy to report that I've forgotten all the details of that
    language.
  </p>
  <p>
    Next is C and C++, MFC and the myriad of string modules in Visual Studio C++/MFC/OLE/Net, etc.
    I actually don't know how many versions of string classes exist in Visual Studio C++ libraries.
  </p>

  <p>
  Strings are important in man/machine interfaces.  The traditional C style string was a pointer to a
  block of characters terminated with a zero character.  The difficulty with this data structure is that
  the block was fixed size either on the stack, in global memory or in the heap.  Overflow of the block
  is a persistant security problem.
  </p>
  <p>
    The solution is a string that manages its storage invisibly.  The MFC "string" class based on the "basic_string"
  class does exactly that.  Furthermore, when compiling with ANSI characters the string class manages 8 bit
  characters, i.e. char.  When compiling with Unicode characters the string class manages 16 bit characters,
  i.e. wchar_t.  Seems like a natural fit.
  </p>
  <p>
  But wait, CStrings are used in dialog boxes and in other places.  Investigating CStrings yields the
  conclusion that they do not make a very good general purpose string as there are a not of useful operations
  defined for them when compared to the string class.  Other useful string classes include the bstr_t and
  the variant_t class which can contain a bstr_t.  The set of operations on a string needed enhancement so the
  String class was constructed.  It is a subclass of the string class.  Many operations are defined on a String
  including but not limited to the operations on the string s.  Furthermore, the CString class needed some
  additional operations so the Cstring was created too.
  </p>
  <p>
  When compileing with the Unicode option, strings use Unicode
  characters.  A magic header file tchar.h allows both ANSI and Unicode compilation of the same file with
  the appropriate character being used.  But there are times when compiling with Unicode that a ANSI character
  string is needed (and vice versa).  Two little classes provide for this translation:  ToAnsi and ToUnicode.
  All they do is do the conversion in to a private buffer during initialization of an object of the class
  with a function call of the object (ToAnsi toAnsi("_T("abc"));  char* p = toAnsi();).  P in the example is a
  pointer to an ANSI string until the function (or block) is exited.
  </p>
  <p>The String Package including String, Cstring, ToAnsi and ToUnicode may be found in the
  library in the Strings.h and Strings.cpp files.
  </p>
  </section>
  <!-- InstanceEndEditable --></article>
  <!-- end .content -->

  <footer>
    <hr />
    <div>
      <a href="../index.htm">Home</a>&nbsp;&nbsp;
      <a href="../Modules/index.htm">Modules</a>&nbsp;&nbsp;
      <a href="../Pictures.htm">Pictures</a>
      <a href="index.htm">Prog Guide</a>
    </div>
    <div>eMail: romeo romeo victor tango alpha tango sam whiskey delta echo dot charlie oscar mike</a></div>
    <div>Last modified:&nbsp; <!-- #BeginDate format:Am2 -->10/23/23<!-- #EndDate --></div>
    <div align="center">Copyright SD&E.&nbsp; All rights reserved.</div>
  </footer>
  <!-- end .container -->
</div></body>
<!-- InstanceEnd --></html>
