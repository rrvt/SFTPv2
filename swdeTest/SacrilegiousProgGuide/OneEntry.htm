<!DOCTYPE HTML>
<html lang="en"><!-- InstanceBegin template="/Templates/pageGuide.dwt" codeOutsideHTMLIsLocked="false" --> 
<head>

<meta charset="utf-8">
<!-- InstanceBeginEditable name="doctitle" -->
<title>One Entry, One Exit (Structured Programming)</title>
<!-- InstanceEndEditable -->
<!-- InstanceBeginEditable name="head" -->
<!-- InstanceEndEditable -->

<link href="../stylesheet.css"    rel="stylesheet" />
<link href="../Graphics/Icon.ico" rel="shortcut icon" />

<!--[if lte IE 7]>
<style>
.content { margin-right: -1px; } /* this 1px negative margin can be placed on any of the columns in
                                                                        this layout with the same corrective effect. */
ul.nav a { zoom: 1; }                    /* the zoom property gives IE the hasLayout trigger it needs to correct
                                                                        extra whiltespace between the links */
</style>
<![endif]-->

<!--[if lt IE 9]>
<script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
<![endif]-->

<script type="text/javascript">
function MM_jumpMenu(targ,selObj,restore){ //v3.0
  eval(targ+".location='"+selObj.options[selObj.selectedIndex].value+"'");
  if (restore) selObj.selectedIndex=0;
}
</script>
</head>

<body>

<div class="container">

  <header>
    <hgroup>
      <a href="../index.htm" id="LogoLink"><img src="../Graphics/swdeLogo200.jpg" alt="Logo" /></a>
      <div class="TitleBlock">
        <a href="../index.htm">
            <h1>Software Design &amp; Engineering</h1>
            <h1>
                    <!-- InstanceBeginEditable name="PageTitle" -->
            One Entry, One Exit (Structured Programming)
          <!-- InstanceEndEditable -->
          </h1>
        </a>
      </div>
      <div class="TitleBlock" id="DropDown">
        <ul>
          <li><a href="../index.htm">Home</a></li>
          <li><a href="../Modules/index.htm">Modules</a>
            <ul id="ModulesDrop">
              <li><a href="../Modules/PersonalProjs/KeePass.htm">KeePass/LastPass</a></li>
              <li><a href="../Modules/CodingProjs/MyLibrary.htm">Library</a></li>
              <li><a href="../Modules/PersonalProjs/MvMp3.htm">Move Mp3 Tracks</a></li>
              <li><a href="../Modules/SJRACESProjs/PreOutpost.htm">PreOutpost</a></li>
              <li><a href="../Modules/PersonalProjs/PrntProgramAndWix.htm">Print Program (pp)</a></li>
              <li><a href="../Modules/SJRACESProjs/RWracesDB.htm">Read/Write RACES DB</a></li>
              <li><a href="../Modules/PersonalProjs/PrntProgramAndWix.htm#SetEnv">Set Environment Var</a></li>
              <li><a href="../Modules/CodingProjs/StringModules.htm">String Class</a></li>
              <li><a href="../Modules/CodingProjs/WixApp.htm">WixApp</a></li>
            </ul>
          </li>
          <li><a href="../Pictures.htm">Pictures</a></li>
          <li><a href="index.htm">Prog Guide</a>
            <ul id="ModulesDrop">
              <li><a href="Geography.htm">Screen and Page Geography and Code Layout</a></li>
              <li><a href="Naming.htm">Names and Naming Conventions</a></li>
              <li><a href="Abstraction.htm">Abstraction</a></li>
              <li><a href="SuccessFailure.htm">Null, Success and Failure</a></li>
              <li><a href="OneEntry.htm">One Entry, One Exit (Structured Programming)</a></li>
              <li><a href="HidingDetails.htm">Hiding Details</a></li>
              <li><a href="Expandable.htm">Expandable</a></li>
              <li><a href="qsort.htm">qsort</a></li>
              <li><a href="Strings.htm">Strings</a></li>
<!--
             <li>Packages and/or Objects</li>
             <li>Loops in Objects</li>
             <li>Building Blocks</li>
             <li>Vectors (Arrays)</li>
-->          
            </ul>
          </li>
        </ul>
      </div>
        </hgroup>
  </header>

  <div class="sidebar1">
    <nav>
      <ul>
        <li><a href="../index.htm">Home</a></li>
        <li><a href="../Modules/index.htm">Modules &amp; Projects</a></li>
        <ul id="Modules">
        <li><a href="../Modules/CodingProjs/index.htm">Coding Projects</a></li>
        <li><a href="../Modules/DataBaseProjs/index.htm">Data Base Projects</a></li>
        <li><a href="../Modules/PersonalProjs/index.htm">Personal Projects</a></li>
        <li><a href="../Modules/SJRACESProjs/index.htm">SJ RACES Projects</a></li>
        </ul>
        <li><a href="../Pictures.htm">Pictures</a></li>
        <li><a href="index.htm">Programming Guide</a></li>
          <ul id="Modules">
            <li><a href="Geography.htm">Screen and Page Geography and Code Layout</a></li>
            <li><a href="Naming.htm">Names and Naming Conventions</a></li>
            <li><a href="Abstraction.htm">Abstraction</a></li>
            <li><a href="SuccessFailure.htm">Null, Success and Failure</a></li>
            <li><a href="OneEntry.htm">One Entry, One Exit (Structured Programming)</a></li>
            <li><a href="HidingDetails.htm">Hiding Details</a></li>
            <li><a href="Expandable.htm">Expandable</a></li>
            <li><a href="qsort.htm">qsort</a></li>
            <li><a href="Strings.htm">Strings</a></li>
<!--        <li>Packages and/or Objects</li>
            <li>Vectors (Arrays)</li>
            <li>Loops in Objects</li>
            <li>Building Blocks</li>
-->
          </ul>
        <li><a href="../about.htm">About Bob</a></li>
      </ul>
    </nav>
  </div><!-- end .sidebar1 -->

  <article class="content"><!-- InstanceBeginEditable name="Content" -->
  <section>
    <h2>Structured Programming</h2>
    <p>
    The original goal of structured programming may have been to organize code by banning the "goto"
    statment.  The problem with the goto probably revolved around the notion that the target of the
    goto statement could be anywhere in the code.  If there are a million lines of code (and I've
    worked on project with a million lines of code) it could take
    a while to find the target.  Editors and machines were not as sophisticated as they are now.  In the
    middle 70s I worked briefly (quite briefly) on a system that used paper tape as the storage medium.
    Since before that I had worked on time-sharing systems with moderately better editors my time on
    that system was very brief.
    </p>
    <p>
        We now have several better control sturctures although sometime a goto may be required to easily
    and cheaply exit a function with all the proper cleanup performed in one place.  If that happens
    perhaps the function needs some additional scrutiny.
    </p>
    <p>
        I don't particularly like "structured programming" as I believe that it makes the code unneccessarily
    complex.  One entry, one exit is the particular rule that I dislike.  I once was given the task of
    fixing a problem.  When I looked at the code it appeared that the problem was in one function.  The
    major issue in solving the problem was "One Entry, One Exit" as the function was 40 - 8.5" x 11" pages
    in length.  An "if" statement might have a corresponding "else if" statment a few pages away.  How does
    one understand such a function?
    </p>
        <h3>Abstraction</h3>
    <p>
        My approach is to try to find abstractions in the code.  Then move the code that implements the
    abstraction to separate functions.  This of course is risky, but if done carefully will succeed in
    reducing complexity sufficiently to solve problems.
    </p>
    <p>
        Just moving the code to separate functions doesn't always simplify the code.  Here is a made up example:
    </p>
    <table width=100%>
    <tr><td><Code>bool prepareFlight() {</Code></td></tr>
    <tr><td><Code>bool rslt;</Code></td></tr>
    <tr><td><Code>&nbsp;</Code></td></tr>
    <tr><td><Code>&nbsp;&nbsp;if (wingsWaggle()) {</Code></td></tr>
    <tr><td><Code>&nbsp;&nbsp;&nbsp;&nbsp;if (oilPressureNormal()) {</Code></td></tr>
    <tr><td><Code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (brakesWorking()) {</Code></td></tr>
    <tr><td><Code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rslt = true;</Code></td></tr>
    <tr><td><Code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</Code></td></tr>
    <tr><td><Code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else {</Code></td></tr>
    <tr><td><Code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tellMechanics("Brake Problem"); rslt = false;</Code></td></tr>
    <tr><td><Code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</Code></td></tr>
    <tr><td><Code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</Code></td></tr>
    <tr><td><Code>&nbsp;&nbsp;&nbsp;&nbsp;else {</Code></td></tr>
    <tr><td><Code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tellMechanics("Oil Pressure Problem"); rslt = false;</Code></td></tr>
    <tr><td><Code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</Code></td></tr>
    <tr><td><Code>&nbsp;&nbsp;&nbsp;&nbsp;}</Code></td></tr>
    <tr><td><Code>&nbsp;&nbsp;else {</Code></td></tr>
    <tr><td><Code>&nbsp;&nbsp;&nbsp;&nbsp;tellGroundCrew("Flags Not Removed"); rslt = false;</Code></td></tr>
    <tr><td><Code>&nbsp;&nbsp;&nbsp;&nbsp;}</Code></td></tr>
    <tr><td><Code>&nbsp;&nbsp;return rslt;</Code></td></tr>
    <tr><td><Code>&nbsp;&nbsp;}</Code></td></tr>
    </table><br>
        <p>
        Maybe a little over the top with this example but this is what I would do with the same
    function:
    </p>
    <table width=100%>
    <tr><td><Code>bool prepareFlight() {</Code></td></tr>
    <tr><td><Code>bool rslt;</Code></td></tr>
    <tr><td><Code></Code></td></tr>
    <tr><td><Code>&nbsp;&nbsp;if (!wingsWaggle())&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{tellGroundCrew("Flags Not Removed");&nbsp;&nbsp;&nbsp;return false;}</Code></td></tr>
    <tr><td><Code></Code></td></tr>
    <tr><td><Code>&nbsp;&nbsp;if (!oilPressureNormal())&nbsp;{tellMechanics("Oil Pressure Problem"); return false;}</Code></td></tr>
    <tr><td><Code></Code></td></tr>
    <tr><td><Code>&nbsp;&nbsp;if (!brakesWorking())&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{tellMechanics("Brake Problem");&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;}</Code></td></tr>
    <tr><td><Code></Code></td></tr>
    <tr><td><Code>&nbsp;&nbsp;return true;</Code></td></tr>
    <tr><td><Code>&nbsp;&nbsp;}</Code></td></tr>
    </table><br>
        <p>
        There are two advantages and one tricky part to this organization.  The first is that the consequences
    of failure are immediately obvious to the reader (and can be ignored if that is not related to the
    problem at hand).  No searching for that "else" clause.  The second is that the function is actually
    smaller than the first version.  The tricky part is the cleanup if the function requires it.  All
    exits from the function must provide correct cleanup.  Sometimes it is just calling one cleanup function
    before the return.  Another way is to requre the caller to do the cleanup in both cases.  Just don't
    forget to do it and don't hide it in a mass of code (i.e. make it obvious to the reader).
    </p>

        <h3>"break" and "continue"</h3>

    <p>
    Loop bodies may contain "break" and "continue" statements.  These provide excellent ways to conditionally
    leave or resume a loop when that is the correct behavior.  The continue statement is particularly
    important when there are several preconditions to performing some action of the target of a loop.
    Test for each precondition on the target and "continue" the loop when the precondition is false.
        </p>
    <p>
        Likewise, in a loop often there some feature of the target of the loop that is being sought.
    Rather than deal with the target when found inside the body of the loop, leave the loop with a "break"
    and deal with the target after the loop.  Note, one must be sure of success when leaving the loop
    but that is usually easy as more often than not a pointer to the target is used in the loop.  When
    the loop fails to find the target the pointer should be zero (an easy test in C/C++).
    </p>
    <p>
        Even better, make the search for the target a function of some kind that returns either zero or
    a pointer.  Then inside the body of the loop a return statement is used to leave the loop and function.
    After the loop fails to find the target a return of zero will indicate failure.
    </p>
    <p>
        Sometimes a function needs to be used in some sort of conditional statment (if, for, while).  Then
    the function should be written as follows:
    </p>
    <table width=100%>
    <tr><td><Code>bool find(String name, Target*& tgt);</Code></td></tr>
    </table><br>
        <p>
        Here the function use the reference to a pointer in its own loop.  When the name is found in the
    target structure a value of true is returned.  If the loop concludes without finding the name
    a value of false is returned.
    </p>
    <p>
    When looking at all records in some data structure, returning a pointer to the first and next
    record are two useful functions.  When finding a single record returning a boolean (bool) and a
    pointer to the record found is a useful function.
    </p>


  </section>
  <!-- InstanceEndEditable --></article>
  <!-- end .content -->

  <footer>
    <hr />
    <div>
      <a href="../index.htm">Home</a>&nbsp;&nbsp;
      <a href="../Modules/index.htm">Modules</a>&nbsp;&nbsp;
      <a href="../Pictures.htm">Pictures</a>
      <a href="index.htm">Prog Guide</a>
    </div>
    <div>eMail: romeo romeo victor tango alpha tango sam whiskey delta echo dot charlie oscar mike</a></div>
    <div>Last modified:&nbsp; <!-- #BeginDate format:Am2 -->7/28/24<!-- #EndDate --></div>
    <div align="center">Copyright SD&E.&nbsp; All rights reserved.</div>
  </footer>
  <!-- end .container -->
</div></body>
<!-- InstanceEnd --></html>
