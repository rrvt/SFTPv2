<!DOCTYPE HTML>
<html lang="en"><!-- InstanceBegin template="/Templates/pageGuide.dwt" codeOutsideHTMLIsLocked="false" --> 
<head>

<meta charset="utf-8">
<!-- InstanceBeginEditable name="doctitle" -->
<title>Hiding Details</title>
<!-- InstanceEndEditable -->
<!-- InstanceBeginEditable name="head" -->
<!-- InstanceEndEditable -->

<link href="../stylesheet.css"    rel="stylesheet" />
<link href="../Graphics/Icon.ico" rel="shortcut icon" />

<!--[if lte IE 7]>
<style>
.content { margin-right: -1px; } /* this 1px negative margin can be placed on any of the columns in
                                                                        this layout with the same corrective effect. */
ul.nav a { zoom: 1; }                    /* the zoom property gives IE the hasLayout trigger it needs to correct
                                                                        extra whiltespace between the links */
</style>
<![endif]-->

<!--[if lt IE 9]>
<script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
<![endif]-->

<script type="text/javascript">
function MM_jumpMenu(targ,selObj,restore){ //v3.0
  eval(targ+".location='"+selObj.options[selObj.selectedIndex].value+"'");
  if (restore) selObj.selectedIndex=0;
}
</script>
</head>

<body>

<div class="container">

  <header>
    <hgroup>
      <a href="../index.htm" id="LogoLink"><img src="../Graphics/swdeLogo200.jpg" alt="Logo" /></a>
      <div class="TitleBlock">
        <a href="../index.htm">
            <h1>Software Design &amp; Engineering</h1>
            <h1>
                    <!-- InstanceBeginEditable name="PageTitle" -->
            Hiding Details
          <!-- InstanceEndEditable -->
          </h1>
        </a>
      </div>
      <div class="TitleBlock" id="DropDown">
        <ul>
          <li><a href="../index.htm">Home</a></li>
          <li><a href="../Modules/index.htm">Modules</a>
            <ul id="ModulesDrop">
              <li><a href="../Modules/PersonalProjs/KeePass.htm">KeePass/LastPass</a></li>
              <li><a href="../Modules/CodingProjs/MyLibrary.htm">Library</a></li>
              <li><a href="../Modules/PersonalProjs/MvMp3.htm">Move Mp3 Tracks</a></li>
              <li><a href="../Modules/SJRACESProjs/PreOutpost.htm">PreOutpost</a></li>
              <li><a href="../Modules/PersonalProjs/PrntProgramAndWix.htm">Print Program (pp)</a></li>
              <li><a href="../Modules/SJRACESProjs/RWracesDB.htm">Read/Write RACES DB</a></li>
              <li><a href="../Modules/PersonalProjs/PrntProgramAndWix.htm#SetEnv">Set Environment Var</a></li>
              <li><a href="../Modules/CodingProjs/StringModules.htm">String Class</a></li>
              <li><a href="../Modules/CodingProjs/WixApp.htm">WixApp</a></li>
            </ul>
          </li>
          <li><a href="../Pictures.htm">Pictures</a></li>
          <li><a href="index.htm">Prog Guide</a>
            <ul id="ModulesDrop">
              <li><a href="Geography.htm">Screen and Page Geography and Code Layout</a></li>
              <li><a href="Naming.htm">Names and Naming Conventions</a></li>
              <li><a href="Abstraction.htm">Abstraction</a></li>
              <li><a href="SuccessFailure.htm">Null, Success and Failure</a></li>
              <li><a href="OneEntry.htm">One Entry, One Exit (Structured Programming)</a></li>
              <li><a href="HidingDetails.htm">Hiding Details</a></li>
              <li><a href="Expandable.htm">Expandable</a></li>
              <li><a href="qsort.htm">qsort</a></li>
              <li><a href="Strings.htm">Strings</a></li>
<!--
             <li>Packages and/or Objects</li>
             <li>Loops in Objects</li>
             <li>Building Blocks</li>
             <li>Vectors (Arrays)</li>
-->          
            </ul>
          </li>
        </ul>
      </div>
        </hgroup>
  </header>

  <div class="sidebar1">
    <nav>
      <ul>
        <li><a href="../index.htm">Home</a></li>
        <li><a href="../Modules/index.htm">Modules &amp; Projects</a></li>
        <ul id="Modules">
        <li><a href="../Modules/CodingProjs/index.htm">Coding Projects</a></li>
        <li><a href="../Modules/DataBaseProjs/index.htm">Data Base Projects</a></li>
        <li><a href="../Modules/PersonalProjs/index.htm">Personal Projects</a></li>
        <li><a href="../Modules/SJRACESProjs/index.htm">SJ RACES Projects</a></li>
        </ul>
        <li><a href="../Pictures.htm">Pictures</a></li>
        <li><a href="index.htm">Programming Guide</a></li>
          <ul id="Modules">
            <li><a href="Geography.htm">Screen and Page Geography and Code Layout</a></li>
            <li><a href="Naming.htm">Names and Naming Conventions</a></li>
            <li><a href="Abstraction.htm">Abstraction</a></li>
            <li><a href="SuccessFailure.htm">Null, Success and Failure</a></li>
            <li><a href="OneEntry.htm">One Entry, One Exit (Structured Programming)</a></li>
            <li><a href="HidingDetails.htm">Hiding Details</a></li>
            <li><a href="Expandable.htm">Expandable</a></li>
            <li><a href="qsort.htm">qsort</a></li>
            <li><a href="Strings.htm">Strings</a></li>
<!--        <li>Packages and/or Objects</li>
            <li>Vectors (Arrays)</li>
            <li>Loops in Objects</li>
            <li>Building Blocks</li>
-->
          </ul>
        <li><a href="../about.htm">About Bob</a></li>
      </ul>
    </nav>
  </div><!-- end .sidebar1 -->

  <article class="content"><!-- InstanceBeginEditable name="Content" -->
  <section>
    <h2>Hiding Details</h2>
    <p>
      In any language that a programmer uses, implementing an algorithm may be seriously corrupted by
    deliberate or inadvertant changing of some variable used with the algorithm.  As programs grew
    larger the ability to know all parts of the program grew smaller until today that even modestly
    sized programs contain hundreds of variables.  Think about the last Man/Machine Interface program
    you wrote and tell me you know each and every variable name in the program and what it does.  So
    hiding details is useful for program security.
    </p>
    <p>
      Now consider the program itself.  How many times will you want to use the words "open", "close" or "initialize"
    as a function name in the public interface of some module.  Now the c++ class allows us to do just that.
    Furthermore, much
    of data used in the algorithm may be hidden from view outside of the object.  Now we would know that the
    algorithm would not behave incorrectly because of a distrubance code outside of the class.
    Any failure of the algorithm could be blamed on the code inside class.
    </p>
    <p>

    </p>
    <p>
      An example might make this clearer.  Suppose we want to describe several nodes in a network.  Each node in
    the network has three parameters:
    <ul>
        <li>Name</li>
        <li>Ipv4 address</li>
        <li>Ipv6 address</li>
    </ul>
    Suppose there are an unknown number of nodes.  This suggests a second class to hold all the nodes with perhapse
    the following attributes:
    <ul>
        <li>container of nodes</li>
        <li>number of nodes in container</li>
    <li>indicator of current node</li>
    </ul>
    The node attributes need to be seen so we'll make them publicly available.  The details of the container need to
    be hidden to avoid being disturbed by outside forces so we'll make them private.
    </p>
    <p>
      Let's name the container class, Nodes and the single node class Node.  The node is the interesting thing, the
    container class not so much.  But, we do need to initialize the container class, add a node to the container,
    perhapse delete a node from the class, find a specific node by node or address, and visit each and every
    node in the container.  Here is a possible Node class:
        <blockquote>
    <TableCode>
            class Node {<br>
      public:<br>
      String name;<br>
      String ipv4;<br>
      String ipv6;<br>
      }
    </TableCode>
    </blockquote>
    Here is a possible container class, Nodes:
    <blockquote>
    <TableCode>
            class Nodes {<br>
      private:<br>
      int&nbsp;&nbsp;   curNode;<br>
      int&nbsp;&nbsp;   noNodes;<br>
      Nodes nodes[10];<br>
      public:<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Nodes() : noNodes(0), curNode(-1) {}<br>
      &nbsp;&nbsp;void&nbsp; add(node& n);<br>
      &nbsp;&nbsp;Node* find(String& name);<br>
       &nbsp;&nbsp;bool&nbsp; delCurNode();<br>
       <br>

      &nbsp;&nbsp;Node* startLoop();<br>
      &nbsp;&nbsp;Node* nextNode();<br>
      &nbsp;&nbsp;}
    </TableCode>
    </blockquote>
    So all the data used by the container class is protected.  The methods (functions) are able to reliably store, find
    and delete the nodes from the data structure.  Furthermore, if 10 items are not sufficient then another data
    structure may be substituted and the outside world need not know and no code outside will need to be changed.
    An expanding array, a linked list or a hash table could replace the static array.
    </p>
    <p>
      One more point about these two classes.  We probably will only instantiate one container class, i.e. one container
    object but there are at least 10 instances of the Node class, i.e. 10 Node objects.  So the notion of hiding is
    a property of the class declaration regardless of the number of objects created by using the class.
    </p>
    <p>

    </p>
  </section>
  <!-- InstanceEndEditable --></article>
  <!-- end .content -->

  <footer>
    <hr />
    <div>
      <a href="../index.htm">Home</a>&nbsp;&nbsp;
      <a href="../Modules/index.htm">Modules</a>&nbsp;&nbsp;
      <a href="../Pictures.htm">Pictures</a>
      <a href="index.htm">Prog Guide</a>
    </div>
    <div>eMail: romeo romeo victor tango alpha tango sam whiskey delta echo dot charlie oscar mike</a></div>
    <div>Last modified:&nbsp; <!-- #BeginDate format:Am2 -->7/28/24<!-- #EndDate --></div>
    <div align="center">Copyright SD&E.&nbsp; All rights reserved.</div>
  </footer>
  <!-- end .container -->
</div></body>
<!-- InstanceEnd --></html>
