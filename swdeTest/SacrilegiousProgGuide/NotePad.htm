<!DOCTYPE HTML>
<html lang="en"><!-- InstanceBegin template="/Templates/pageGuide.dwt" codeOutsideHTMLIsLocked="false" -->
<head>

<meta charset="utf-8">
<!-- InstanceBeginEditable name="doctitle" -->
<title>NotePad -- Convenient Output in Doc/View Apps</title>
<!-- InstanceEndEditable -->
<!-- InstanceBeginEditable name="head" -->
<!-- InstanceEndEditable -->

<link href="../stylesheet.css"    rel="stylesheet" />
<link href="../Graphics/Icon.ico" rel="shortcut icon" />

<!--[if lte IE 7]>
<style>
.content { margin-right: -1px; } /* this 1px negative margin can be placed on any of the columns in
                                                                        this layout with the same corrective effect. */
ul.nav a { zoom: 1; }                    /* the zoom property gives IE the hasLayout trigger it needs to correct
                                                                        extra whiltespace between the links */
</style>
<![endif]-->

<!--[if lt IE 9]>
<script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
<![endif]-->

<script type="text/javascript">
function MM_jumpMenu(targ,selObj,restore){ //v3.0
  eval(targ+".location='"+selObj.options[selObj.selectedIndex].value+"'");
  if (restore) selObj.selectedIndex=0;
}
</script>
</head>

<body>

<div class="container">

  <header>
    <hgroup>
      <a href="../index.htm" id="LogoLink"><img src="../Graphics/swdeLogo200.jpg" alt="Logo" /></a>
      <div class="TitleBlock">
        <a href="../index.htm">
            <h1>Software Design &amp; Engineering</h1>
            <h1>
                    <!-- InstanceBeginEditable name="PageTitle" -->
            NotePad -- Convenient Output in Doc/View Apps
          <!-- InstanceEndEditable -->
          </h1>
        </a>
      </div>
      <div class="TitleBlock" id="DropDown">
        <ul>
          <li><a href="../index.htm">Home</a></li>
          <li><a href="../Modules/index.htm">Modules</a>
            <ul id="ModulesDrop">
              <li><a href="../Modules/PersonalProjs/KeePass.htm">KeePass/LastPass</a></li>
              <li><a href="../Modules/CodingProjs/MyLibrary.htm">Library</a></li>
              <li><a href="../Modules/PersonalProjs/MvMp3.htm">Move Mp3 Tracks</a></li>
              <li><a href="../Modules/SJRACESProjs/PreOutpost.htm">PreOutpost</a></li>
              <li><a href="../Modules/PersonalProjs/PrntProgramAndWix.htm">Print Program (pp)</a></li>
              <li><a href="../Modules/SJRACESProjs/RWracesDB.htm">Read/Write RACES DB</a></li>
              <li><a href="../Modules/PersonalProjs/PrntProgramAndWix.htm#SetEnv">Set Environment Var</a></li>
              <li><a href="../Modules/CodingProjs/StringModules.htm">String Class</a></li>
              <li><a href="../Modules/CodingProjs/WixApp.htm">WixApp</a></li>
            </ul>
          </li>
          <li><a href="../Pictures.htm">Pictures</a></li>
          <li><a href="index.htm">Prog Guide</a>
            <ul id="ModulesDrop">
              <li><a href="Geography.htm">Screen and Page Geography and Code Layout</a></li>
              <li><a href="Naming.htm">Names and Naming Conventions</a></li>
              <li><a href="Abstraction.htm">Abstraction</a></li>
              <li><a href="SuccessFailure.htm">Null, Success and Failure</a></li>
              <li><a href="OneEntry.htm">One Entry, One Exit (Structured Programming)</a></li>
              <li><a href="HidingDetails.htm">Hiding Details</a></li>
              <li><a href="Expandable.htm">Expandable</a></li>
              <li><a href="qsort.htm">qsort</a></li>
              <li><a href="Strings.htm">Strings</a></li>
<!--
             <li>Packages and/or Objects</li>
             <li>Loops in Objects</li>
             <li>Building Blocks</li>
             <li>Vectors (Arrays)</li>
-->
            </ul>
          </li>
        </ul>
      </div>
        </hgroup>
  </header>

  <div class="sidebar1">
    <nav>
      <ul>
        <li><a href="../index.htm">Home</a></li>
        <li><a href="../Modules/index.htm">Modules &amp; Projects</a></li>
        <ul id="Modules">
        <li><a href="../Modules/CodingProjs/index.htm">Coding Projects</a></li>
        <li><a href="../Modules/DataBaseProjs/index.htm">Data Base Projects</a></li>
        <li><a href="../Modules/PersonalProjs/index.htm">Personal Projects</a></li>
        <li><a href="../Modules/SJRACESProjs/index.htm">SJ RACES Projects</a></li>
        </ul>
        <li><a href="../Pictures.htm">Pictures</a></li>
        <li><a href="index.htm">Programming Guide</a></li>
          <ul id="Modules">
            <li><a href="Geography.htm">Screen and Page Geography and Code Layout</a></li>
            <li><a href="Naming.htm">Names and Naming Conventions</a></li>
            <li><a href="Abstraction.htm">Abstraction</a></li>
            <li><a href="SuccessFailure.htm">Null, Success and Failure</a></li>
            <li><a href="OneEntry.htm">One Entry, One Exit (Structured Programming)</a></li>
            <li><a href="HidingDetails.htm">Hiding Details</a></li>
            <li><a href="Expandable.htm">Expandable</a></li>
            <li><a href="qsort.htm">qsort</a></li>
            <li><a href="Strings.htm">Strings</a></li>
<!--        <li>Packages and/or Objects</li>
            <li>Vectors (Arrays)</li>
            <li>Loops in Objects</li>
            <li>Building Blocks</li>
-->
          </ul>
        <li><a href="../about.htm">About Bob</a></li>
      </ul>
    </nav>
  </div><!-- end .sidebar1 -->

  <article class="content"><!-- InstanceBeginEditable name="Content" -->
  <section>
    <h2>Introduction</h2>
    <p>
    Menus, Toolbars, Dialog Boxes, Controls provide a way to execute commands and provide text input
    to apps.  But I did not find a convenient way to output large amounts of text data.  The doc/view
    separates the processing from the management of the window but there is still some work that
    needs to be done to output to the window.
    </p>

    <p>
        So let be clear.  A doc/view app has a few bars at the top of the window (e.g. Menu bar, Tool Bar, Tabs, etc.).
    At the bottom of the window is a status bar.  The space in between is just empty.  That is the area to
    which NotePad sends text information.  Think of it as a pad of paper which has a finite width but infinite
    length.  It has a vertical scroll bar, but no horizontal scroll bar.
    </p>

    <p>
        NotePad does not manage the output so that a paragraph is displayed wrapping the text so that it is all
    visible in the window.  But with some additonal work, it will wrap text output.  The raw mode, if I
    can call it that, is just translating objects into text output.  Of course the objects need to be
    amenable to text output.
    </p>
    <p>
        NotePad is a class so there can be many objects.  But the easiest way to use NotePad is with one global
    object called "notePad".  It is defined in the NotePad header file.  Here are some examples of using
    notePad:
    </p>
    <blockquote>
            notePad.clear();<br>
      notePad << _T("Line of text followed by a carriage return and line feed.") << nCrlf;<br><br>
            s.format(_T("This is an string with an integer following: "), i);<br><br>
      notePad << s << nCrlf;<br><br>
      notePad << _T("This is an string with an integer following: ") << i << nCrlf;<br>
    </blockquote>

    <p>
        The last two lines output the same information.  There are many features and I'll
    try to document all of them here.  Once something is output it stays in the window
    until the notePad is cleared.
    </p>

    <ul>
    <li>notePad &lt;&lt; tc; -- where tc is a constant tchar* (i.e. TCchar*), a c style string</li>
    <li>notePad << s;&nbsp;&nbsp;-- where stg is a String (my string class)</li>
    <li>notePad &lt;&lt; cs;&nbsp;-- where cs is either a Cstring or CString</li>
    <li>notePad &lt;&lt; bs;&nbsp;-- where bs is a bstr_t (i.e. a B string)</li>
    <li>notePad << tc;&nbsp;--  where tc is a character (char or Tchar)</li>
    <li>notePad << cs;&nbsp;-- where cs is a const char*</li>
    <li>notePad << v;&nbsp;&nbsp;-- where v is an int</li>
    <li>notePad << v;&nbsp;&nbsp;-- where v is a size_t (i.e. __int64)</li>
    <li>notePad << v;&nbsp;&nbsp;-- where v is a long</li>
    <li>notePad << v;&nbsp;&nbsp;-- where v is an unsigned long (ulong)</li>
    <li>notePad << v;&nbsp;&nbsp;-- where v is a double</li>
    <li>notePad << dt;&nbsp;-- where dt is a Date</li>
    <li>notePad << nSetTab(v);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-- Sets a tab at the vth char position</li>
    <li>notePad << nSetRtab(v);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-- Sets a tab such that the right end<br>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;of a tab word is at the tab position</li>
    <li>notePad << nSetLMargin(v);&nbsp;-- Sets the left margin</li>
    <li>notePad << nSetWidth(v);&nbsp;&nbsp;&nbsp;-- Sets the minimum width of the next integer or double</li>
    <li>notePad << nSetPrec(v);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-- Sets the number of digits after the decimal point of the next double</li>
    <li>notePad << nFSize(v);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-- Sets the number of digits in a floating point</li>
    <li>notePad << nFFace(tc);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-- Sets the font face (e.g. _T(&quot;Arial&quot;)), push the current font</li>
    <li>notePad << nClrTabs;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-- Clear all tabs</li>
    <li>notePad << nTab;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-- Insert a tab in the output, i.e move to next tab</li>
    <li>notePad << nCenter;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-- Center the next phrase</li>
    <li>notePad << nRight;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-- Right adjust phrase in the line</li>
    <li>notePad << nBeginLine;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-- Begin underlining output</li>
    <li>notePad << nEndLine;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-- End underlining output</li>
    <li>notePad << nCrlf;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-- Output a carriage return and line feed</li>
    <li>notePad << nEndPage;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-- End printer page</li>
    <li>notePad << nBold;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-- Begin bold font output, push current font</li>
    <li>notePad << nItalic;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-- Begin italic font output, push current font</li>
    <li>notePad << nUnderLine;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-- Begin underline font, push current font</li>
    <li>notePad << nStrikeOut;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-- Begin strike out font, push current font</li>
    <li>notePad << nFont;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-- Pop previous font</li>
      </ul>

    <p>
    If the operator "<<" is treated as a streaming operator then sending data to the notepad is a representation
    of the window output area.  So multiple outputs may be placed on the same line or divided between two or more 
    lines.  For example:
    </p>
    <blockquote>
    void anExample {<br>
    Cstring    mumble = _T(" *** Cstring test *** ");<br>
    CString    foo    = _T(" --- CString test --- ");<br>
    String     goo    = _T(" +++ String  test +++ ");<br>
    bstr_t     bs     = _T(" ^^^ BString test ^^^ ");<br><br>

    &nbsp;&nbsp;notePad << _T(" *** TCchar* test *** ") << mumble << foo;<br>
    &nbsp;&nbsp;notePad << goo << bs << nCrlf;<br> 
    &nbsp;&nbsp;notePad << _T("Next Line") << nCrlf;
    &nbsp;&nbsp;}<br>
    </blockquote>
    
    <p>
    The anExample function would yield the following output in the window:
    </p>
    <blockquote>
		 *** TCchar* test ***  *** Cstring test ***  --- CString test ---  +++ String  test +++  ^^^ BString test ^^^ <br>
     Next Line<br>
    </blockquote>
    <p>
		:More examples appear in a pdf file that you can find <a href="notePadExamples.pdf" target="_blank">here</a>.  
    The code that produces the example is: 
    </p>
    <blockquote>
    void TestAppDoc::notePadExamples() {<br>
    Cstring    mumble = _T(" *** Cstring test *** ");<br>
    CString    foo    = _T(" --- CString test --- ");<br>
    String     goo    = _T(" +++ String  test +++ ");<br>
    bstr_t     bs     = _T(" ^^^ BString test ^^^ ");<br>
    <br>
    &nbsp;&nbsp;notePad << _T("Loaded ") << mumble << foo << goo << CbxCaption << _T(" into ComboBx") << nCrlf;<br>
    &nbsp;&nbsp;notePad << mumble << nCrlf;<br>
    &nbsp;&nbsp;notePad << foo << nCrlf;<br>
    &nbsp;&nbsp;notePad << goo << nCrlf;<br>
    &nbsp;&nbsp;notePad << bs  << nCrlf;<br>
    &nbsp;&nbsp;}

    </blockquote>
  </section>
  <!-- InstanceEndEditable --></article>
  <!-- end .content -->

  <footer>
    <hr />
    <div>
      <a href="../index.htm">Home</a>&nbsp;&nbsp;
      <a href="../Modules/index.htm">Modules</a>&nbsp;&nbsp;
      <a href="../Pictures.htm">Pictures</a>
      <a href="index.htm">Prog Guide</a>
    </div>
    <div>eMail: romeo romeo victor tango alpha tango sam whiskey delta echo dot charlie oscar mike</a></div>
    <div>Last modified:&nbsp; <!-- #BeginDate format:Am2 -->8/2/24<!-- #EndDate --></div>
    <div align="center">Copyright SD&E.&nbsp; All rights reserved.</div>
  </footer>
  <!-- end .container -->
</div></body>
<!-- InstanceEnd --></html>
