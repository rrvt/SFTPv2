<!DOCTYPE HTML>
<html lang="en"><!-- InstanceBegin template="/Templates/pageModule.dwt" codeOutsideHTMLIsLocked="false" -->
<head>

<meta charset="utf-8">
<!-- InstanceBeginEditable name="doctitle" -->
<title>Print Program and Wix</title>
<!-- InstanceEndEditable -->
<!-- InstanceBeginEditable name="head" -->
<!-- InstanceEndEditable -->

<link href="../../stylesheet.css"    rel="stylesheet" />
<link href="../../Graphics/Icon.ico" rel="shortcut icon" />

<!--[if lte IE 7]>
<style>
.content { margin-right: -1px; } /* this 1px negative margin can be placed on any of the columns in
                                                                        this layout with the same corrective effect. */
ul.nav a { zoom: 1; }                    /* the zoom property gives IE the hasLayout trigger it needs to correct
                                                                        extra whiltespace between the links */
</style>
<![endif]-->

<!--[if lt IE 9]>
<script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
<![endif]-->

<script type="text/javascript">
function MM_jumpMenu(targ,selObj,restore){ //v3.0
  eval(targ+".location='"+selObj.options[selObj.selectedIndex].value+"'");
  if (restore) selObj.selectedIndex=0;
}
</script>
</head>

<body>

<div class="container">

  <header>
    <hgroup>
      <a href="../../index.htm" id="LogoLink"><img src="../../Graphics/swdeLogo200.jpg" alt="Logo" /></a>
      <div class="TitleBlock">
        <a href="../../index.htm">
            <h1>Software Design &amp; Engineering</h1>
            <h1>
                    <!-- InstanceBeginEditable name="PageTitle" -->
            Print Program (pp) and Wix
          <!-- InstanceEndEditable -->
          </h1>
        </a>
      </div>
      <div class="TitleBlock" id="DropDown">
        <ul>
          <li><a href="../../index.htm">Home</a></li>
          <li><a href="../index.htm">Modules</a>
            <ul id="ModulesDrop">
              <li><a href="KeePass.htm">KeePass/LastPass</a></li>
              <li><a href="../CodingProjs/MyLibrary.htm">Library</a></li>
              <li><a href="MvMp3.htm">Move Mp3 Tracks</a></li>
              <li><a href="../SJRACESProjs/PreOutpost.htm">PreOutpost</a></li>
              <li><a href="PrntProgramAndWix.htm">Print Program (pp)</a></li>
              <li><a href="../SJRACESProjs/RWracesDB.htm">Read/Write RACES DB</a></li>
              <li><a href="PrntProgramAndWix.htm#SetEnv">Set Environment Var</a></li>
              <li><a href="../CodingProjs/StringModules.htm">String Class</a></li>
              <li><a href="../CodingProjs/WixApp.htm">WixApp</a></li>
            </ul>
          </li>
          <li><a href="../../Pictures.htm">Pictures</a></li>
          <li><a href="../../SacrilegiousProgGuide/index.htm">Prog Guide</a>
            <ul id="ModulesDrop">
              <li><a href="../../SacrilegiousProgGuide/Geography.htm">Screen and Page Geography and Code Layout</a></li>
              <li><a href="../../SacrilegiousProgGuide/Naming.htm">Names and Naming Conventions</a></li>
              <li><a href="../../SacrilegiousProgGuide/Abstraction.htm">Abstraction</a></li>
              <li><a href="../../SacrilegiousProgGuide/SuccessFailure.htm">Null, Success and Failure</a></li>
              <li><a href="../../SacrilegiousProgGuide/OneEntry.htm">One Entry, One Exit (Structured Programming)</a></li>
              <li><a href="../../SacrilegiousProgGuide/HidingDetails.htm">Hiding Details</a></li>
              <li><a href="../../SacrilegiousProgGuide/Expandable.htm">Expandable</a></li>
              <li><a href="../../SacrilegiousProgGuide/qsort.htm">qsort</a></li>
              <li><a href="../../SacrilegiousProgGuide/Strings.htm">Strings</a></li>
<!--
             <li>Packages and/or Objects</li>
             <li>Loops in Objects</li>
             <li>Building Blocks</li>
             <li>Vectors (Arrays)</li>
-->
            </ul>
          </li>
        </ul>
      </div>
        </hgroup>
  </header>

  <div class="sidebar1">
    <nav>
      <ul>
        <li><a href="../../index.htm">Home</a></li>
        <li><a href="../index.htm">Modules &amp; Projects</a></li>
        <li><a href="../CodingProjs/index.htm">Coding Projects</a></li>
          <ul id="Modules">
            <li><a href="../DataBaseProjs/CodeGen.htm">CodeGen</a></li>
            <li><a href="../../SacrilegiousProgGuide/Expandable.htm">Expandable</a></li>
            <li><a href="../CodingProjs/GitPrepProject.htm">GitPrep</a></li>
            <li><a href="../CodingProjs/Library.htm">Library</a></li>
            <li><a href="../CodingProjs/MakeApp.htm">MakeApp</a></li>
            <li><a href="../../SacrilegiousProgGuide/Strings.htm">Strings</a></li>
            <li><a href="../CodingProjs/WixApp.htm">WixApp</a></li>
          </ul><br>
          
        <li><a href="../DataBaseProjs/index.htm">Data Base Projects</a></a></li>
		  <ul id="Modules">
          <li><a href="../DataBaseProjs/CodeGen.htm">CodeGen</a></li>
          <li><a href="../SJRACESProjs/RACESContacts.htm">RACES-Contacts</a></li>
          <li><a href="../SJRACESProjs/RWracesDB.htm">RWracesDB</a></li>
          </ul><br>
          
        <li><a href="index.htm">Personal Projects</a></a></li>
		  <ul id="Modules">
<!--          <li>Address Book</li>
          <li>BkGd</li>
-->          
          <li><a href="KeePass.htm">KeePassLastPass</a></li>
<!--      <li>Media</li>   -->
          <li><a href="MvMp3.htm">MvMp3</a></li>
          <li><a href="PrntProgramAndWix.htm">Print Program</a></li>
<!--      <li>Read</li>
          <li>Secure FTP</li>
-->          
        </ul><br>
          
        <li><a href="../SJRACESProjs/index.htm">SJ RACES Projects</a></a></li>
		  <ul id="Modules">
<!--      <li>ICS-211a</li>
          <li>ICS-214a</li>
-->          
          <li><a href="../SJRACESProjs/PreOutpost.htm">PreOutpost</a></li>
          <li><a href="../SJRACESProjs/RACESContacts.htm">RACES-Contacts</a></li>
          <li><a href="../SJRACESProjs/RACESdb.htm">RWracesDB</a></li>
          </ul><br>

        <li><a href="../../Pictures.htm">Pictures</a></li>
        <li><a href="../../SacrilegiousProgGuide/index.htm">Programming Guide</a></li>
        <li><a href="../../about.htm">About Bob</a></li>
      </ul>
    </nav>
  </div><!-- end .sidebar1 -->

  <article class="content"><!-- InstanceBeginEditable name="Content" -->
  <section>
        <h3>Update of pp</h3>
    <h4>5/5/19</h4>
    <p>
            As part of the Visual Studio 2017 upgrade, pp was recompiled.  At this time WixApp has been created and it
      is being used to create the Product.wxs file used by Wix to build an installer.  It also uses SetEnv to install
      a link to the pp.exe in the system Path variable.  Both SetEnv and WixApp are discussed else where.
    </p>
    <p>
            My Library is used with pp but it is not included here.  Look for it
      <a href="../CodingProjs/MyLibrary.htm">elsewhere in the site</a>. </p>
  </section>
  <section>
    <h3>Introduction</h3>
    <p>
        I am using Visual Studio 2013 version.  I am also using SlickEdit for most of the editting and compiling tasks.
      So where did I begin this journey.  I originally installed (copied) pp to C:\Local\ and manually placed a link in System.Path
      to "Local".  That was probably 4 PCs ago (late 90s).  Recently I've embarked on cleaning up several development projects.
      One of the tasks was to provide an installer for a couple of the projects.  Then as these things go I just had to add an installer
      to all of the projects.
    </p>

    <p>
        The Print Program (pp) is a command line program out of the dark ages.  As described in the Modules page, it has some redeaming
      capabilities so I've kept it alive all these many years.  This last week (October 2017) I wanted to create an installer for it.
      Visual Studio 2013 doesn't support an installer but by "adding" one to Visual Studio from the Microsoft Toolkit (add link) a
        Microsoft "approved" (if that is the right adjective) installer is available.  The documentation for the installer is very clear:
      No support for adding a program's path to System.Path.  Furthermore there is no way to invoke an external program to do the job
      for the installer.
    </p>

    <p>
        Searching for a solution yielded one interesting suggestion: Wix.  Wix would allow invoking an external program but everyone agrees
      that it is a difficult program to understand and use.
    </p>
    <h3><a href="https://github.com/rrvt/WixApp" target="_blank">Wix</a></h3>
    <p>
        Wix is not a procedural language.  It more or less is a description of some things that should happen when the
      Microsoft installer is invoked with the data in the ".msi" file.  Wix provides a way to supply the data needed.
    </p>

    <p>
        My purpose in this little paper is not to document Wix but rather to document those things I learned the hard way.
      Wix is adequately documented online and in at least one book:
      "<a href="https://www.packtpub.com/application-development/wix-36-developers-guide-windows-installer-xml" target="_blank">
        Wix 3.6:    A Developer's Guide to Windows Installer XML
       </a>" by Nick Ramirez published by PACKT.  Start on page 1 and construct the example "Amazing ..." in Chapter one and work
       through the next few chapters adding and modifying the example.  This will prove to one that Wix works.
      </p>

    <h3>Wix Reality</h3>
    <p>
        Now I want to document those things in Wix that caused me trouble so that the next time I embark on a Wix adventure I
      have some help to avoid the issues I discovered this time around.  Here is a <a href="../CodingProjs/Product.wxs.pdf" target="_blank">pdf file</a>
      of the Product.wxs that produces the installer for pp.
    </p>

    <h3>Getting Started</h3>
    <p>
      The Wix File must begin with two XML lines.:
      <blockquote>
                &lt;?xml version="1.0" encoding="UTF-8"?&gt;<br>
                &lt;Wix xmlns="http://schemas.microsoft.com/wix/2006/wi"&gt;
      </blockquote>
      But following those lines at least four different XML statement types can appear:
      <blockquote>
        &lt;?define ...?&gt;<br>
        &lt;?include ...?&gt;<br>
        &lt;Product ...&gt;<br>
        &lt;Fragment ...&gt;<br>
      </blockquote>
      One of the issues is that the "include" statement may only appear after the initial two lines and
      outside of any of the other XML structures.  Note that XML requires that the Product tag is closed
      by a corresponding &lt;/Product&gt; and the Fragment tag must be closed by a corresponding
      &lt;/Fragment&gt;.  It would have been nice if an include statement could appear between the Product tags.
    </p>
    <p>
        One of the issues was providing one declaration for the directory in which the files could be found.  There is an
      extensive mechanism for identifying the location where the files should be installed (by files I mean the
      executable, shortcuts and data files).
      However all the documentation I've read (which is admittedly not all that much)
      always use just the file name as if the file is in the same place as the Wix file.
      The define tag allows one to define a variable which can define the path.
      In this installer I also need the path to three files which I may use in several places.
    <blockquote>
            &lt;?define SourceDir = "$(var.SolutionDir)\Release\" ?&gt;<br>
            &lt;?define WixInclude = "D:\Sources\WixIncludes\"?&gt;
    </blockquote>
    </p>
    <p>
        The WixIncludes content may be found here. It is included with the Print Program because it is required there to create an installer.</p>
    <h3>Product</h3>
    <p>
      The Product block is the outer entity of the install package.  It includes the following tags:
      <ul>
        <li>Package</li>
        <li>MajorUpgrade</li>
        <li>MediaTemplate</li>
        <li>User Interface (UI) Declaration and Modification</li>
        <li>Icon Declarations</li>
        <li>External Executable Declarations</li>
        <li>Feature Block</li>
      </ul>
            The first three are documented adequately in the aforementioned book.  The Feature Block lists only
      one ComponentGroup reference leaving the actual list of features to install to the Component Group.
    </p>
    <p>
        There are four predefined user interfaces.  The one chosen, WixUI_InstallDir, allows just one change,
      the destination directory.  However it also requires the user accept a license agreement, you know the
      one that nobody reads.  I searched high and low for a way to skip the license agreement.  The UI block
      changes the control flow from the Welcome Dialog to the InstallDir Dialog.
    </p>
    <p>
        Windows is an Icon rich interface.  The user interface has a standard bit map for both the side of dialog box
      and a banner about the white area used for text.  They have special names and can be replaced.
      The program may be represented by icons in various places.  There are typically two such icons, one for the
      program and one for the uninstall program.  In this instance they are the same as the only program that needs
      an icon is the uninstall program.  The ARPPRODUCTICON is another special name the places the icon mentioned in
      tag in the Control Panel/Programs and Features (Win&nbsp;7).
    </p>
    <p>
            The last interesting section of the Product Block is the Custom Action declaration.  In my search for
      an installer that would add a path to System.Path Wix provided a way to do that.  A custom program
      could receive information directly from the installer during both an install and an uninstall.  The
      programs job would be to add and delete the path from System.Path.
    </p>
    <p>
        The order of the Custom Action tags is important.  I tried two different organizations for the
      Custom Action declarations.  The first was to place the Custom Action declarations in a Fragment.
      Didn't cause a compile error but the custom action did not run.  Oh well.
      The second organization was to place the Custom Action declarations in an Wix include file (i.e. .wxi)
      and place the &lt;?include ... ?&gt; just before the Feature block.  No joy there either.
    </p>
    <h3>Fragments</h3>
    <p>
        The two fragments are just used to separate pieces of the Product.  They are discussed at length in
      the Wix 3.6 book.
      The Properties ApplicationFolderName, WIXUI_INSTALLDIR and WixAppFolder are used in the UI.
    </p>
    <h3><a id="SetEnv"></a><a href="https://github.com/rrvt/WixApp"  target="_blank">SetEnv Path</a></a></h3>
    <h4>Update 5/5/19</h4>
    <p>
            SetEnv is called from the Wix Installer when necessary (and instructed by the user in WixApp).
    </p>
    <h4>2017 Comments</h4>
    <p>
        Searching the internet and the Visual Studio 2013 Help files I found the functions:
      <ul>
      <li>Environment::GetEnvironmentVariable</li>
      <li>Environment::SetEnvironmentVariable</li>
      </ul>
      They are only available in CLR programs and I chose a console program.  The libraries used are incompatible
      with most of the "normal" C/C++ libraries.  After much teeth gnashing over the System::String functions I worked
      through logic to add to the System.Path and remove from System.Path.  When adding to System.Path the program must
      verify that the path does not already exist in System.Path.  When removing the program must find where the
      path resides in System.Path.  In both cases there are five cases for the location of a specific path in System.Path.
      System.Path contains zero or more paths, each path separated for another by a semicolon (';').  The five cases are
      assuming that the given path is not null:
      <ul>
        <li>System.Path is empty</li>
        <li>System.Path has one path, i.e. the given path.  In this case no semicolon follows the path</li>
        <li>System.Path has two or more paths and the first one is the given path, i.e. the given path is followed
                by a semicolon</li>
        <li>System.Path has three or more paths and the given path appears between semicolons</li>
        <li>System.Path has two or more paths and the last path is the given path, i.e. it is not followed
                by a semicolon</li>
      </ul>
    </p>
    <p>
        The SetEnvPath source is here</a>.  (5/5/19) SetEnv is now compiled separately. </p>
    <p>
        Another gotcha occurred recently with the SetEnvPath program. There was a problem with the
      latest version of WinZip (v22).  I was a good citizen and ran a number of experiments for the
      WinZip folks to see if we could isolate the problem.  One of those experiments required me to
      remove all but the most recent versions of the Net Framework from my system.
      Unfortunately, SetEnvPath's compilation requires Net Framework 4.6.1 (I believe it is the last version
      that may be used in Visual Studio 2013 (VS13)).
    </p>
    <p>
        So I spent a good deal of time trying to get VS13 to accept a later version but that was not to be.
      I finally reloaded a clean version of the Net Framework 4.6.1 target package and that fixed the
      problem.
    </p>
    <h3>Shortcuts</h3>
    <p>
        There are at least two places that a shortcut to the executable should appear.
      One of those places is in the Start Menu in a Folder with a name on it that indicates
      the product (either a company name or the name of the program).  The other place
      might be the desktop.
    </p>
    <p>
        Wix provides at least two ways to specify the shortcut.  One way is to include the
      shortcut inside a Fragment and DirectoryRef separated from the actual program
      declaration.  The program reference may be given with a '#' followed by the id of the
      program.  Unfortunately there is another feature of the start menu shortcut,
      'Advertise="yes"', that causes a warning when the shortcut is in a Fragment.
      The Advertise attribute of the shortcut will
      place program shortcut between the pinned shortcuts and the "All Programs" button.
      So take a look at the <a href="../CodingProjs/AwesomeProduct.wxs.pdf">AwesomeProduct.wxs.pdf</a>
      file to see a solution to the warning, i.e. placing the shortcuts in the same
      Component as the file to which the shortcut points.
      In this case instead of being inside of a Directory Reference the shortcut must include
      a Directory attribute to specify where the shortcut is to go </p>
  </section>
  <!-- InstanceEndEditable --></article>
  <!-- end .content -->

  <footer>
    <hr />
    <div>
      <a href="../../index.htm">Home</a>&nbsp;&nbsp;
      <a href="../index.htm">Modules</a>&nbsp;&nbsp;
      <a href="../../Pictures.htm">Pictures</a>
      <a href="../../SacrilegiousProgGuide/index.htm">Prog Guide</a>
    </div>
    <div>eMail: romeo romeo victor tango alpha tango sam whiskey delta echo dot charlie oscar mike</a></div>
    <div>Last modified:&nbsp; <!-- #BeginDate format:Am2 -->10/23/23<!-- #EndDate --></div>
    <div align="center">Copyright SD&E.&nbsp; All rights reserved.</div>
  </footer>
  <!-- end .container -->
</div></body>
<!-- InstanceEnd --></html>
