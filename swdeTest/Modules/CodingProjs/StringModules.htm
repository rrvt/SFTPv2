<!DOCTYPE HTML>
<html lang="en"><!-- InstanceBegin template="/Templates/pageModule.dwt" codeOutsideHTMLIsLocked="false" -->
<head>

<meta charset="utf-8">
<!-- InstanceBeginEditable name="doctitle" -->
<title>New String C++ Class</title>
<!-- InstanceEndEditable -->
<!-- InstanceBeginEditable name="head" -->
<!-- InstanceEndEditable -->

<link href="../../stylesheet.css"    rel="stylesheet" />
<link href="../../Graphics/Icon.ico" rel="shortcut icon" />

<!--[if lte IE 7]>
<style>
.content { margin-right: -1px; } /* this 1px negative margin can be placed on any of the columns in
                                                                        this layout with the same corrective effect. */
ul.nav a { zoom: 1; }                    /* the zoom property gives IE the hasLayout trigger it needs to correct
                                                                        extra whiltespace between the links */
</style>
<![endif]-->

<!--[if lt IE 9]>
<script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
<![endif]-->

<script type="text/javascript">
function MM_jumpMenu(targ,selObj,restore){ //v3.0
  eval(targ+".location='"+selObj.options[selObj.selectedIndex].value+"'");
  if (restore) selObj.selectedIndex=0;
}
</script>
</head>

<body>

<div class="container">

  <header>
    <hgroup>
      <a href="../../index.htm" id="LogoLink"><img src="../../Graphics/swdeLogo200.jpg" alt="Logo" /></a>
      <div class="TitleBlock">
        <a href="../../index.htm">
            <h1>Software Design &amp; Engineering</h1>
            <h1>
                    <!-- InstanceBeginEditable name="PageTitle" -->
            String Modules
          <!-- InstanceEndEditable -->
          </h1>
        </a>
      </div>
      <div class="TitleBlock" id="DropDown">
        <ul>
          <li><a href="../../index.htm">Home</a></li>
          <li><a href="../index.htm">Modules</a>
            <ul id="ModulesDrop">
              <li><a href="../PersonalProjs/KeePass.htm">KeePass/LastPass</a></li>
              <li><a href="MyLibrary.htm">Library</a></li>
              <li><a href="../PersonalProjs/MvMp3.htm">Move Mp3 Tracks</a></li>
              <li><a href="../SJRACESProjs/PreOutpost.htm">PreOutpost</a></li>
              <li><a href="../PersonalProjs/PrntProgramAndWix.htm">Print Program (pp)</a></li>
              <li><a href="../SJRACESProjs/RWracesDB.htm">Read/Write RACES DB</a></li>
              <li><a href="../PersonalProjs/PrntProgramAndWix.htm#SetEnv">Set Environment Var</a></li>
              <li><a href="StringModules.htm">String Class</a></li>
              <li><a href="WixApp.htm">WixApp</a></li>
            </ul>
          </li>
          <li><a href="../../Pictures.htm">Pictures</a></li>
          <li><a href="../../SacrilegiousProgGuide/index.htm">Prog Guide</a>
            <ul id="ModulesDrop">
              <li><a href="../../SacrilegiousProgGuide/Geography.htm">Screen and Page Geography and Code Layout</a></li>
              <li><a href="../../SacrilegiousProgGuide/Naming.htm">Names and Naming Conventions</a></li>
              <li><a href="../../SacrilegiousProgGuide/Abstraction.htm">Abstraction</a></li>
              <li><a href="../../SacrilegiousProgGuide/SuccessFailure.htm">Null, Success and Failure</a></li>
              <li><a href="../../SacrilegiousProgGuide/OneEntry.htm">One Entry, One Exit (Structured Programming)</a></li>
              <li><a href="../../SacrilegiousProgGuide/HidingDetails.htm">Hiding Details</a></li>
              <li><a href="../../SacrilegiousProgGuide/Expandable.htm">Expandable</a></li>
              <li><a href="../../SacrilegiousProgGuide/qsort.htm">qsort</a></li>
              <li><a href="../../SacrilegiousProgGuide/Strings.htm">Strings</a></li>
<!--
             <li>Packages and/or Objects</li>
             <li>Loops in Objects</li>
             <li>Building Blocks</li>
             <li>Vectors (Arrays)</li>
-->
            </ul>
          </li>
        </ul>
      </div>
        </hgroup>
  </header>

  <div class="sidebar1">
    <nav>
      <ul>
        <li><a href="../../index.htm">Home</a></li>
        <li><a href="../index.htm">Modules &amp; Projects</a></li>
        <li><a href="index.htm">Coding Projects</a></li>
          <ul id="Modules">
            <li><a href="../DataBaseProjs/CodeGen.htm">CodeGen</a></li>
            <li><a href="../../SacrilegiousProgGuide/Expandable.htm">Expandable</a></li>
            <li><a href="GitPrepProject.htm">GitPrep</a></li>
            <li><a href="Library.htm">Library</a></li>
            <li><a href="MakeApp.htm">MakeApp</a></li>
            <li><a href="../../SacrilegiousProgGuide/Strings.htm">Strings</a></li>
            <li><a href="WixApp.htm">WixApp</a></li>
          </ul><br>
          
        <li><a href="../DataBaseProjs/index.htm">Data Base Projects</a></a></li>
		  <ul id="Modules">
          <li><a href="../DataBaseProjs/CodeGen.htm">CodeGen</a></li>
          <li><a href="../SJRACESProjs/RACESContacts.htm">RACES-Contacts</a></li>
          <li><a href="../SJRACESProjs/RWracesDB.htm">RWracesDB</a></li>
          </ul><br>
          
        <li><a href="../PersonalProjs/index.htm">Personal Projects</a></a></li>
		  <ul id="Modules">
<!--          <li>Address Book</li>
          <li>BkGd</li>
-->          
          <li><a href="../PersonalProjs/KeePass.htm">KeePassLastPass</a></li>
<!--      <li>Media</li>   -->
          <li><a href="../PersonalProjs/MvMp3.htm">MvMp3</a></li>
          <li><a href="../PersonalProjs/PrntProgramAndWix.htm">Print Program</a></li>
<!--      <li>Read</li>
          <li>Secure FTP</li>
-->          
        </ul><br>
          
        <li><a href="../SJRACESProjs/index.htm">SJ RACES Projects</a></a></li>
		  <ul id="Modules">
<!--      <li>ICS-211a</li>
          <li>ICS-214a</li>
-->          
          <li><a href="../SJRACESProjs/PreOutpost.htm">PreOutpost</a></li>
          <li><a href="../SJRACESProjs/RACESContacts.htm">RACES-Contacts</a></li>
          <li><a href="../SJRACESProjs/RACESdb.htm">RWracesDB</a></li>
          </ul><br>

        <li><a href="../../Pictures.htm">Pictures</a></li>
        <li><a href="../../SacrilegiousProgGuide/index.htm">Programming Guide</a></li>
        <li><a href="../../about.htm">About Bob</a></li>
      </ul>
    </nav>
  </div><!-- end .sidebar1 -->

  <article class="content"><!-- InstanceBeginEditable name="Content" -->
   <h4>String Module</h4>
   <p>Back in the late sixties and early seventies I invented a string handling module which used a four 
   pointer block that would allow access to the beginning and end of a string and make it easy to provide
   many operations of the string body.  That all went away with C.  So for a while I used the crude, clumsy
   functions for manipulating C strings (i.e. single pointer to beginning of block and a zero character to
   designate the end of the string).  There was no memory management of the string body and many holes in
   code were allowed by this implementation.
   </p>
    <p>
   	Somewhere along the line C++ became popular and Microsoft foundation Class (MFC) was invented.  I came to
    this late and started writing code in c++.  Time passes and I realized that Visual Studio's libraries 
    have many ways to handle strings.  Eventually I settled on the basic_string template in the Ansi version
    string.  The string class has many useful operations and may be subclassed to add even more operations.
    </p>
    <p>
	There is another module named CString which has some useful features.  But is is clearly inferior to 
    string particularly in its definition.  There just doesn't seem to be a definition of CString like there
    is for the basic_string and string classes.  Having said that, one must tolerate CString because many of
    the MFC library requires the use of a CString, either as an input or as an output.
    </p>
    <p>
	Both string and CString manage the string body storage so that is one worry that is removed from the
    engineer.  This is such an important issue that almost any cost should be tolerated to avoid trying to
    manage the string's body (i.e. where the characters are kept).
    </p>
    <p>
	During the transition to Unicode the template, basic_string, was easily used to form a tstring which
    uses a Tchar in the body.  This one small changed transformed the entire module in Unicode with hardly
    any effort (even though it took some doing to figure it out the first time).
    </p>
	<p>
	Tchar is an interesting type in itself.  It is either an Ansi character or a 16 bit character.  This is 
    determined by the an element of the  Properties of the project.  
    Specifically Properties/General/Character Set (in VS2022 it is Properties/Advanced/Character Set).  The
    choices are "Not Set" (i.e. Ansi), "Unicode" or "Multi-Byte".  It appears that for Unicode and Multi-Byte
    the Tchar is a 16 bit character.  All of the C functions that operate on the C-style string have
    two versions that are listed in "tchar.h".  Using the "t" version of the C-style string functions makes
    the function useful for both Ansi and Unicode strings without changing the code itself, just the Character
    Set in the properties.  Furthermore, with the little definition of tstring to be a basic string of a Tchar
    the String class works for both character sets too.
    </p>

  <h3>String</h3>
  <h4>More Comments About Strings (6/1/20)</h4>
  <p>
  Sometime in the last year I converted the String package (and many other packages) to using Unicode characters
  (16 bits per character).  This had a serious ripple effect and it took some time to dampen the ripple.  By now
  it seems to be done.
  </p>
  <p>
  Let me start this discussion with some of my personal conventions for naming.  Back when C was being invented the
  lower case character set was being introduced into languages because the computers could support them.  Up to
  that time only upper case characters were supported by the hardware/software.  So, of course, lower case was used
  everywhere.  The basic idea of a "type" was invented and given names, for example the integer was an "int".  Again
  hardware constructs limited the size of an int and the C language was very flexible and molded the language to
  each set of hardware.  Time passes, more things are invented, sizes change but the C language moved with them.
  </p>
  <p>
  Eventually, we got to "Object Oriented Languages" of which C++ is one.  Now the programmer could define his own
  elements in the language.  Along the way the Hungarian Notation was invented where the first few characters of
  an object describe its type.  I never appreciated the use of characters that way trying in my naming to describe the
  object itself in the name.  For example, a name for a softball would not be szsoftball (where sz indicates that it
  is a zero terminated string) in the Hungarian Notation but I would call it a "softball", period.  The language
  would be sure to insist that I use the correct operations on the softball however it was defined.
  </p>
  <p>
  However, there are entities in C++ that should be immediately recognizable, that of typedefs, classes, structs,
  enums and objects.  The former four entities may define objects (or pseudo-objects).  So I have chosen a simple
  scheme:  Capitalize the names of my typdefs, classes, structs and enums.  Objects begin with lower case letters.
  Multiple word names in both cases the inner words are capitalized even if they are just abbreviations or single
  letters which stand for something longer.
  </p>
  <p>
  Now why did I settle on this convention.  Some time ago (probably 30 or 40 years) I read something about
  the psychology of reading.  The notion that I took from that article was that Upper and lower cases make
  reading easier.  The use of both upper and lower case signal something in the brain that passes information to the reader that is useful.
  </p>
  <p>
    OK, enough on conventions.  Here is my take on the Unicode character:
  </p>
  <Code>
  typedef&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TCHAR &nbsp;&nbsp;Tchar;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Ordinary signed character<br/>
  typedef const    TCHAR  &nbsp;&nbsp;TCchar;&nbsp;&nbsp;&nbsp;&nbsp;// Ordinary constant signed character<br/>
  typedef const   _TUCHAR  TUCchar;&nbsp;&nbsp;&nbsp;// Ordinary constant unsigned character<br/>
    </Code>
  <p></p>
  <p>
  Along came Unicode and the String class had to change.  Now it is a subclass of tstring:
  </p>
  <Code>
    typedef basic_string&lt;Tchar&gt; tstring;
  </Code>
  <p></p>
  <p>
  Whoops I extended the &quot;string&quot; class definition by prefixing a t to it since this is an 
  extension of the MFC definition.  
  </p>
  <p>
    What can one do with a String?  It can be initialized with:
  </p>
  <ul>
	<li>C-strings (zero terminated array of Tchars)</li>
	<li>single characters</li>    
	<li>integers of various sizes</li>
	<li>"B" Strings -- bstr_t</li>
	<li>CStrings</li>
	<li>Variant that contain B Strings</li>
	<li>floating point objects</li>
	<li>And more can be added when needed!</li>
  </ul>
  
	<p>
    There are a few attributes of a string that can be retrieved:
    </p>         
    <ul>
	<li>The boolean "isEmpty()</li>
	<li>The integer length of the string</li>
	<li>The character at a specified index using the "[index]" operator</li>
    </ul>
    <p>
    One can manipulate the string:
	</p>
    <ul>
	<li>clear the contents of the string</li>
	<li>trim spaces, line feed and carriage return from either end or both ends</li>
	<li>translate the entire string to lower or upper case</li>
	<li>Using the C style format function to create the body for a string using various other 
    objects as the data
    </li>
	<li>Assignment of various kinds of objects to a string, transforming them into character representations
    as required.</li>
	<li>Concatenating one or more strings (using the '+' operator and some other entities together to 
    form a new string</li>
	<li>Adding an entity to the end of a string with the "+=" operator</li>
	<li>Explicit and implicit representation of a string as a TCchar* (i.e. a pointer to a const Tchar)</li>
  	<li>The initial characters in a string may be interpret as an integer, signed or unsigned, of a 
    floating point value </li>
	<li>A substring may be copied out of a string provided on knows the index and length of the substring</li>
	<li>Various searches may be performed on a string to discover the index of the target in a string.</li>

	<li>A string may be compared to another entity which represents a string (note there are several in 
    VS C++) using all six of the comparison operators:  "==", "!=", "&gt;", "&lt;", "&gt;=", "&lt;="</li>
    </ul>
  
  
  <p>
  The module includes two classes whose purpose is to translate between 16 bit characters and 
  8 bit characters.
  These classes are needed to translate between Unicode characters in the application and char (8 bit) characters used
  in other parts of the operating system (e.g. many applications still need 8 bit characters in files).
  </p>
  <p>
    Finally, all functions available to a basic_string are available to a String without any special coding.
  </p>

  <!-- InstanceEndEditable --></article>
  <!-- end .content -->

  <footer>
    <hr />
    <div>
      <a href="../../index.htm">Home</a>&nbsp;&nbsp;
      <a href="../index.htm">Modules</a>&nbsp;&nbsp;
      <a href="../../Pictures.htm">Pictures</a>
      <a href="../../SacrilegiousProgGuide/index.htm">Prog Guide</a>
    </div>
    <div>eMail: romeo romeo victor tango alpha tango sam whiskey delta echo dot charlie oscar mike</a></div>
    <div>Last modified:&nbsp; <!-- #BeginDate format:Am2 -->10/23/23<!-- #EndDate --></div>
    <div align="center">Copyright SD&E.&nbsp; All rights reserved.</div>
  </footer>
  <!-- end .container -->
</div></body>
<!-- InstanceEnd --></html>
